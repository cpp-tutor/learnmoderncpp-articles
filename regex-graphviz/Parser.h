// Generated by Bisonc++ V6.05.00 on Mon, 12 Aug 2024 13:24:14 +0100

#ifndef Parser_h_included
#define Parser_h_included

// $insert baseclass
#include "Parserbase.h"
#include "Scanner.h"
#include "Node.h"

class Parser: public ParserBase
{
        
    public:
        Parser() = delete;
        Parser(Scanner& scanner, std::list<Node>& nodes) : scanner{ scanner }, nodes{ nodes } {}
        int parse();

    private:
        Scanner& scanner;
        std::list<Node>& nodes;
        std::list<Node>::iterator nextNode;
        int nodeId{};
        void error();                   // called on (syntax) errors
        int lex();                      // returns the next token from the
                                        // lexical scanner. 
        void print();                   // use, e.g., d_token, d_loc
        void exceptionHandler(std::exception const &exc);

    // support functions for parse():
        void executeAction_(int ruleNr);
        void errorRecovery_();
        void nextCycle_();
        void nextToken_();
        void print_();
};


#endif
